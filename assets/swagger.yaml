openapi: 3.1.0
info:
  title: Fishing Friends API
  description: API pour gérer les utilisateurs, bateaux, sorties de pêche, réservations et carnets de pêche.
  version: 3.0.0
  
servers:
  - url: https://localhost:3000/api
    description: Serveur local sécurisé pour les tests de développement.

security:
  - bearerAuth: []

tags:
  - name: auth
    description: Gestion de l'authentification
  - name: users
    description: Gestion des utilisateurs
  - name: boats
    description: Opérations sur les bateaux
  - name: fishing trip
    description: Gestion des sorties de pêche
  - name: fishing log
    description: Gestion des carnets de pêche
  - name: reservation
    description: Gestion des réservations

paths:
  /v1/auth/login:
    post:
      tags:
        - auth
      summary: Connexion d'un utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Adresse email de l'utilisateur
                password:
                  type: string
                  description: Mot de passe de l'utilisateur
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token d'authentification
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: Identifiant unique de l'utilisateur
                      email:
                        type: string
                        format: email
                        description: Adresse email de l'utilisateur
                      firstname:
                        type: string
                        description: Prénom de l'utilisateur
        '400':
          description: Requête invalide
        '401':
          description: Identifiants invalides
        '500':
          description: Erreur serveur

  /v1/auth/register:
    post:
      tags:
        - auth
      summary: Inscription d'un utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Utilisateur créé avec succès
        '400':
          description: Requête invalide
        '409':
          description: Conflit, l'utilisateur existe déjà
        '500':
          description: Erreur serveur

  /v1/users:
    get:
      tags:
        - users
      summary: Récupérer tous les utilisateurs
      parameters:
        - in: query
          name: lastname
          required: false
          schema:
            type: string
          description: Filtrer les utilisateurs par nom
        - in: query
          name: postal_code
          required: false
          schema:
            type: string
          description: Filtrer les utilisateurs par code postal
        - in : query
          name: city
          required: false
          schema:
            type: string
          description: Filtrer les utilisateurs par ville
        - in: query
          name: status
          required: false
          schema:
              type: string
          description: Filtrer les utilisateurs par statut
        - in: query
          name: activity_type
          required: false
          schema:
              type: string
          description: Filtrer les utilisateurs par type d'activité
      responses:
        '200':
          description: Liste des utilisateurs récupérée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '500':
          description: Erreur serveur
    post:
      tags:
        - users
      summary: Créer un nouvel utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Utilisateur créé avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '409':
          description: Conflit, l'utilisateur existe déjà
        '500':
          description: Erreur serveur
          
  /v1/users/{userId}:
    get:
      tags:
        - users
      summary: Récupérer un utilisateur par son ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID unique de l'utilisateur
      responses:
        '200':
          description: Détails de l'utilisateur récupérés avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Utilisateur non trouvé
        '500':
          description: Erreur serveur
    put:
      tags:
        - users
      summary: Mettre à jour un utilisateur par son ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID unique de l'utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Utilisateur mis à jour avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Utilisateur non trouvé
        '500':
          description: Erreur serveur
    patch:
      tags:
          - users
      summary: Mettre à jour partiellement un utilisateur par son ID
      parameters:
          - in: path
            name: userId
            required: true
            schema:
                type: string
            description: ID unique de l'utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Utilisateur mis à jour avec succès
        '400':
         description: Requête invalide
        '401':
          description: Non authentifié
        '404':
         description: Utilisateur non trouvé
        '500':
          description: Erreur serveur
    delete:
      tags:
        - users
      summary: Supprimer un utilisateur par son ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID unique de l'utilisateur
      responses:
        '204':
          description: Utilisateur supprimé avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Utilisateur non trouvé
        '500':
          description: Erreur serveur

  /v1/boats:
    get:
      tags:
        - boats
      summary: Récupérer tous les bateaux
      parameters:
        - name: ownerId
          in: query
          required: false
          schema:
            type: integer
          description: ID du propriétaire pour filtrer les bateaux
        - name: minLatitude
          in: query
          required: false
          schema:
            type: float
          description: Latitude minimale pour filtrer les bateaux par zone géographique
        - name: maxLatitude
          in: query
          required: false
          schema:
              type: float
          description: Latitude maximale pour filtrer les bateaux par zone géographique
        - name: minLongitude
          in: query
          required: false
          schema:
              type: float
          description: Longitude minimale pour filtrer les bateaux par zone géographique
        - name: maxLongitude
          in: query
          required: false
          schema:
              type: float
          description: Longitude maximale pour filtrer les bateaux par zone géographique
      responses:
        '200':
          description: Liste des bateaux récupérée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Boat'
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Propriétaire non trouvé
        '500':
          description: Erreur serveur
    post:
      tags:
        - boats
      summary: Créer un nouveau bateau
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Boat'
      responses:
        '201':
          description: Bateau créé avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '403':
          description: Pas de permis bateau valide
        '500':
          description: Erreur serveur

  /v1/boats/{boatId}:
    get:
      tags:
        - boats
      summary: Récupérer un bateau par son ID
      parameters:
        - in: path
          name: boatId
          required: true
          schema:
            type: string
          description: ID unique du bateau
      responses:
        '200':
          description: Détails du bateau récupérés avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Boat'
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Bateau non trouvé récupérés avec succès
        '500':
          description: Erreur serveur
    put:
      tags:
        - boats
      summary: Mettre à jour un bateau par son ID
      parameters:
        - in: path
          name: boatId
          required: true
          schema:
            type: string
          description: ID unique du bateau
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Boat'
      responses:
        '200':
          description: Bateau mis à jour avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Bateau non trouvé
        '500':
          description: Erreur serveur
    patch:
      tags:
        - boats
      summary: Mettre à jour partiellement un bateau par son ID
      parameters:
        - in: path
          name: boatId
          required: true
          schema:
              type: string
          description: ID unique du bateau
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Boat'
      responses:
        '200':
          description: Bateau mis à jour avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Bateau non trouvé
        '500':
          description: Erreur serveur
    delete:
      tags:
        - boats
      summary: Supprimer un bateau par son ID
      parameters:
        - in: path
          name: boatId
          required: true
          schema:
            type: string
          description: ID unique du bateau
      responses:
        '204':
          description: Bateau supprimé avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Bateau non trouvé
        '500':
          description: Erreur serveur

  /v1/fishing-trips:
    get:
      tags:
        - fishing trip
      summary: Récupérer toutes les sorties de pêche
      parameters:
        - name: beginDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Filtrer par date de début
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Filtrer par date de fin
        - name: organiserId
          in: query
          required: false
          schema:
            type: integer
          description: Filtrer par organisateur
        - name: boatId
          in: query
          required: false
          schema:
            type: integer
          description: Filtrer par bateau
      responses:
        '200':
          description: Liste des sorties de pêche récupérée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FishingTrip'
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Organisateur ou Bateau non trouvé
        '500':
          description: Erreur serveur
    post:
      tags:
        - fishing trip
      summary: Créer une nouvelle sortie de pêche
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FishingTrip'
      responses:
        '201':
          description: Sortie de pêche créée avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '403':
          description: L'organisateur ne possède pas le bateau ou le nombre de passagers est supérieur à la capacité du bateau
        '404':
          description: Organisateur, Bateau ou Passager non trouvé
        '500':
          description: Erreur serveur

  /v1/fishing-trips/{tripId}:
    get:
      tags:
        - fishing trip
      summary: Récupérer une sortie de pêche par son ID
      parameters:
        - in: path
          name: tripId
          required: true
          schema:
            type: string
          description: ID unique de la sortie de pêche
      responses:
        '200':
          description: Détails de la sortie de pêche récupérés avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FishingTrip'
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Sortie de pêche non trouvée
        '500':
          description: Erreur serveur
    put:
      tags:
        - fishing trip
      summary: Mettre à jour une sortie de pêche par son ID
      parameters:
        - in: path
          name: tripId
          required: true
          schema:
            type: string
          description: ID unique de la sortie de pêche
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FishingTrip'
      responses:
        '200':
          description: Sortie de pêche mise à jour avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '403':
            description: L'organisateur ne possède pas le bateau ou le nombre de passagers est supérieur à la capacité du bateau
        '404':
          description: Sortie de pêche non trouvée
        '500':
          description: Erreur serveur
    patch:
      tags:
        - fishing trip
      summary: Mettre à jour partiellement une sortie de pêche par son ID
      parameters:
        - in: path
          name: tripId
          required: true
          schema:
            type: string
          description: ID unique de la sortie de pêche
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FishingTrip'
      responses:
        '200':
          description: Sortie de pêche mise à jour avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '403':
          description: L'organisateur ne possède pas le bateau ou le nombre de passagers est supérieur à la capacité du bateau
        '404':
          description: Sortie de pêche non trouvée
        '500':
          description: Erreur serveur
    delete:
      tags:
        - fishing trip
      summary: Supprimer une sortie de pêche par son ID
      parameters:
        - in: path
          name: tripId
          required: true
          schema:
            type: string
          description: ID unique de la sortie de pêche
      responses:
        '204':
          description: Sortie de pêche supprimée avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Sortie de pêche non trouvée
        '500':
          description: Erreur serveur

  /v1/reservations:
    get:
      tags:
        - reservation
      summary: Récupérer toutes les réservations
      parameters:
        - name: tripId
          in: query
          required: false
          schema:
            type: integer
          description: ID de la sortie de pêche pour filtrer les réservations
      responses:
        '200':
          description: Liste des réservations récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '500':
          description: Erreur serveur
    post:
      tags:
        - reservation
      summary: Créer une nouvelle réservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '201':
          description: Réservation créée avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '500':
          description: Erreur serveur

  /v1/reservations/{reservationId}:
    get:
      tags:
        - reservation
      summary: Récupérer une réservation par son ID
      parameters:
        - in: path
          name: reservationId
          required: true
          schema:
            type: string
          description: ID unique de la réservation
      responses:
        '200':
          description: Détails de la réservation récupérés avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Réservation non trouvée
        '500':
          description: Erreur serveur
    put:
      tags:
        - reservation
      summary: Mettre à jour une réservation par son ID
      parameters:
        - in: path
          name: reservationId
          required: true
          schema:
            type: string
          description: ID unique de la réservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '200':
          description: Réservation mise à jour avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Réservation non trouvée
    delete:
      tags:
        - reservation
      summary: Supprimer une réservation par son ID
      parameters:
        - in: path
          name: reservationId
          required: true
          schema:
            type: string
          description: ID unique de la réservation
      responses:
        '204':
          description: Réservation supprimée avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '404':
          description: Réservation non trouvée
        '500':
          description: Erreur serveur

  /v1/fishing-logs:
    get:
      tags:
        - fishing log
      summary: Récupérer tous les carnets de pêche
      parameters:
        - name: ownerId
          in: query
          required: false
          schema:
            type: integer
          description: ID de l'utilisateur pour filtrer les carnets de pêche
      responses:
        '200':
          description: Liste des carnets de pêche récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FishingLog'
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '500':
          description: Erreur serveur
    post:
      tags:
        - fishing log
      summary: Créer un nouveau carnet de pêche
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FishingLog'
      responses:
        '204':
          description: Carnet de pêche ajouté avec succès
        '400':
          description: Requête invalide
        '401':
          description: Non authentifié
        '500':
          description: Erreur serveur

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        firstname:
          type: string
          description: Prénom de l'utilisateur
        lastname:
          type: string
          description: Nom de famille de l'utilisateur
        birthday:
          type: string
          format: date
          description: Date de naissance de l'utilisateur
        email:
          type: string
          format: email
          description: Adresse email de l'utilisateur
        password:
          type: string
          description: Mot de passe de l'utilisateur
        tel:
          type: string
          description: Numéro de téléphone de l'utilisateur
        address:
          type: string
          description: Adresse de l'utilisateur
        postal_code:
          type: string
          description: Code postal de l'utilisateur
        city:
          type: string
          description: Ville de l'utilisateur
        spoken_languages:
          type: array
          items:
            type: string
          description: Langues parlées par l'utilisateur
        profile_picture:
          type: string
          description: URL de la photo de profil de l'utilisateur
        boat_license:
          type: string
          description: Numéro de permis bateau de l'utilisateur
        insurance_number:
          type: string
          description: Numéro d'assurance de l'utilisateur
        status:
          type: string
          enum: [particulier, professionnel]
          description: Statut de l'utilisateur
        society_name:
          type: string
          description: Nom de la société de l'utilisateur
        activity_type:
          type: string
          enum: [guide, loueur]
          description: Type d'activité de l'utilisateur
        siret_number:
          type: string
          description: Numéro de SIRET de l'utilisateur
        rc_number:
          type: string
          description: Numéro de RC de l'utilisateur

    Boat:
      type: object
      properties:
        owner:
          type: integer
          description: Identifiant du propriétaire du bateau
        name:
          type: string
          description: Nom du bateau
        description:
          type: string
          description: Brève description du bateau
        picture:
          type: string
          description: URL de la photo du bateau
        licence_type:
          type: string
          enum: [cotier, fluvial]
          description: Type de permis bateau requis
        boat_type:
          type: string
          enum: [open, cabine, catamaran, voilier, jet-ski, canoe]
          description: Type de bateau
        equipments:
          type: array
          items:
            type: string
            enum: [sondeur, vivier, gps, echelle, gps, porte-cannes, radio vhf]
          description: Liste de l'équipement disponible sur le bateau
        bail:
          type: integer
          description: Prix de la causion du bateau
        max_capacity:
          type: integer
          description: Capacité maximale du bateau en nombre de passagers
        city:
          type: string
          description: Ville de stationnement du bateau
        longitude:
          type: number
          description: Coordonnées GPS du bateau
        latitude:
          type: number
          description: Coordonnées GPS du bateau
        motor_type:
          type: string
          enum: [diesel, essence, aucun]
          description: Type de moteur du bateau
        motor_power:
          type: integer
          description: Puissance du moteur en chevaux

    FishingTrip:
      type: object
      properties:
        information:
          type: string
          description: Informations complémentaires sur la sortie de pêche
        type:
          type: string
          enum: [journalière, récurrente]
          description: Type de sortie de pêche
        cost_type:
          type: string
          enum: [global, par personne]
          description: Type de coût de la sortie de pêche
        begin_date:
          type: string
          format: date
          description: Date de début de la sortie de pêche*
        end_date:
          type: string
          format: date
          description: Date de fin de la sortie de pêche
        begin_time:
          type: string
          format: time
          description: Heure de début de la sortie de pêche
        end_time:
          type: string
          format: time
          description: Heure de fin de la sortie de pêche
        passengers:
          type: array
          description: Liste des passagers de la sortie de pêche
          items:
            type: integer
            description: Identifiant de l'utilisateur
        price:
          type: integer
          description: Prix de la sortie de pêche
        boat:
          type: integer
          description: Identifiant du bateau utilisé pour la sortie de pêche
        organiser:
          type: integer
          description: Identifiant de l'organisateur de la sortie de pêche

    Reservation:
      type: object
      properties:
        trip:
          type: string
          description: Identifiant de la sortie de pêche réservée
        nb_places:
          type: integer
          description: Nombre de places
        reservation_price:
          type: integer
          description: Prix de la réservation
        user:
          type: integer
          description: Identifiant de l'utilisateur ayant réservé

    FishingLog:
      type: object
      properties:
        fish_name:
          type: string
          description: Nom du poisson pêché
        picture:
          type: string
          description: URL de la photo du poisson pêché
        comment:
          type: string
          description: Commentaire sur la pêche
        height:
          type: integer
          description: Taille du poisson pêché
        weight:
          type: integer
          description: Poids du poisson pêché
        location:
          type: string
          description: Lieu de pêche
        date:
          type: string
          format: date
          description: Date de la pêche
        freed:
          type: boolean
          description: Indique si le poisson a été relâché
        owner:
          type: integer
          description: Identifiant de l'utilisateur ayant pêché le poisson