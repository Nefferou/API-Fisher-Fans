{
	"info": {
		"_postman_id": "6a749f82-0824-42ae-adf1-4acae810c9a8",
		"name": "Fisher-Fans",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23931155"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/users/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"userId\", pm.response.json().id);\r",
									"pm.globals.set(\"userFirstName\", pm.response.json().firstname)\r",
									"pm.globals.set(\"userEmail\", pm.response.json().email)\r",
									"\r",
									"pm.test(\"✅ Le POST a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le user\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData.firstname).to.eql(\"John\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 6,\r\n    \"firstname\": \"John\",\r\n    \"lastname\": \"Doe\",\r\n    \"email\": \"testuser_{{$timestamp}}@example.com\",\r\n    \"password\": \"testPassword\",\r\n    \"birthday\": \"1985-06-14T22:00:00.000Z\",\r\n    \"tel\": \"123-456-7890\",\r\n    \"address\": \"123 Elm St\",\r\n    \"postal_code\": \"75003\",\r\n    \"city\": \"Paris\",\r\n    \"profile_picture\": \"test.jpg\",\r\n    \"status\": \"particulier\",\r\n    \"society_name\": \"\",\r\n    \"activity_type\": \"\",\r\n    \"boat_license\": \"\",\r\n    \"insurance_number\": \"\",\r\n    \"siret_number\": \"\",\r\n    \"rc_number\": \"\",\r\n    \"spokenLanguages\": [\r\n        \"english\"\r\n    ],\r\n    \"boatIds\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/users/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Users With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"userId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"userId\"))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PUT a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le user\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData.firstname).to.eql(\"JohnUpdated\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"JohnUpdated\",\r\n    \"lastname\": \"DoeUpdated\",\r\n    \"email\": \"testuser_{{userEmail}}@example.com\",\r\n    \"password\": \"testPassword\",\r\n    \"birthday\": \"1985-06-14T22:00:00.000Z\",\r\n    \"tel\": \"123-456-7890\",\r\n    \"address\": \"123 Elm St\",\r\n    \"postal_code\": \"75003\",\r\n    \"city\": \"Paris\",\r\n    \"profile_picture\": \"test.jpg\",\r\n    \"status\": \"particulier\",\r\n    \"society_name\": \"\",\r\n    \"activity_type\": \"\",\r\n    \"boat_license\": \"\",\r\n    \"insurance_number\": \"\",\r\n    \"siret_number\": \"\",\r\n    \"rc_number\": \"\",\r\n    \"spokenLanguages\": [\r\n        \"english\"\r\n    ],\r\n    \"boatIds\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users With ID (New name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"userId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"userId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le user avec les nouvelles informations\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData.firstname).to.eql(\"JohnUpdated\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PATCH a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le user\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData.firstname).to.eql(\"JohnUpdatedTwo\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"JohnUpdatedTwo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users With ID (New name two)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"userId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"userId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le user avec les nouvelles informations\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData.firstname).to.eql(\"JohnUpdatedTwo\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le DELETE a réussi (204)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users With ID Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a échouer (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le user avec les infos supprimé\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData.firstname).to.eql(\"***\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reservations",
			"item": [
				{
					"name": "All Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"reservationId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"✅ Le POST a réussi (201), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"price\": \"150.00\",\r\n    \"nb_places\": 2,\r\n    \"user\": 1,\r\n    \"trip\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"reservationId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"reservationId\"))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PUT a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le reservation\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 1,\r\n        \"price\": \"150.00\",\r\n        \"nb_places\": 4,\r\n        \"user\": 1,\r\n        \"trip\": 1\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations With ID (New name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"reservationId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"reservationId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le reservation avec les nouvelles informations\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"nb_places\");\r",
									"    pm.expect(jsonData.nb_places).to.eql(4)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PATCH a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le reservation avec les nouvelles informations\", function() {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"price\");\r",
									"    pm.expect(jsonData.price).to.eql(\"2000.00\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"price\": \"2000.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations With ID (New name two)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"reservationId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"reservationId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le reservation avec les nouvelles informations\", function() {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"price\");\r",
									"    pm.expect(jsonData.price).to.eql(\"2000.00\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le DELETE a réussi (204)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations With ID Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a échouer (404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// 🔹 Étape 1 : Se connecter pour récupérer le token JWT\r",
					"pm.sendRequest({\r",
					"    url: 'https://localhost:3000/api/v1/auth/login',\r",
					"    method: 'POST',\r",
					"    header: { 'Content-Type': 'application/json' },\r",
					"    body: {\r",
					"        mode: 'raw',\r",
					"        raw: JSON.stringify({\r",
					"            email: \"alice.johnson@example.com\",\r",
					"            password: \"test\"\r",
					"        })\r",
					"    }\r",
					"}, \r",
					"\r",
					"function (err, res) {\r",
					"    if (err) {\r",
					"        console.log(\"❌ Erreur d'authentification :\", err);\r",
					"    } else {\r",
					"        let token = res.json().token;\r",
					"        pm.globals.set(\"token\", token);\r",
					"        console.log(\"✅ Token récupéré:\", token);\r",
					"    }\r",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}