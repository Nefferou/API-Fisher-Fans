{
	"info": {
		"_postman_id": "6a749f82-0824-42ae-adf1-4acae810c9a8",
		"name": "Fisher-Fans",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23931155"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/users/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"userId\", pm.response.json().id);\r",
									"pm.globals.set(\"userFirstName\", pm.response.json().firstname)\r",
									"pm.globals.set(\"userEmail\", pm.response.json().email)\r",
									"\r",
									"pm.test(\"✅ Le POST a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le user\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData.firstname).to.eql(\"John\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 6,\r\n    \"firstname\": \"John\",\r\n    \"lastname\": \"Doe\",\r\n    \"email\": \"testuser_{{$timestamp}}@example.com\",\r\n    \"password\": \"testPassword\",\r\n    \"birthday\": \"1985-06-14T22:00:00.000Z\",\r\n    \"tel\": \"123-456-7890\",\r\n    \"address\": \"123 Elm St\",\r\n    \"postal_code\": \"75003\",\r\n    \"city\": \"Paris\",\r\n    \"profile_picture\": \"test.jpg\",\r\n    \"status\": \"particulier\",\r\n    \"society_name\": \"\",\r\n    \"activity_type\": \"\",\r\n    \"boat_license\": \"\",\r\n    \"insurance_number\": \"\",\r\n    \"siret_number\": \"\",\r\n    \"rc_number\": \"\",\r\n    \"spokenLanguages\": [\r\n        \"english\"\r\n    ],\r\n    \"boatIds\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/users/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Users With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"userId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"userId\"))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PUT a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le user\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData.firstname).to.eql(\"JohnUpdated\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"JohnUpdated\",\r\n    \"lastname\": \"DoeUpdated\",\r\n    \"email\": \"testuser_{{userEmail}}@example.com\",\r\n    \"password\": \"testPassword\",\r\n    \"birthday\": \"1985-06-14T22:00:00.000Z\",\r\n    \"tel\": \"123-456-7890\",\r\n    \"address\": \"123 Elm St\",\r\n    \"postal_code\": \"75003\",\r\n    \"city\": \"Paris\",\r\n    \"profile_picture\": \"test.jpg\",\r\n    \"status\": \"particulier\",\r\n    \"society_name\": \"\",\r\n    \"activity_type\": \"\",\r\n    \"boat_license\": \"\",\r\n    \"insurance_number\": \"\",\r\n    \"siret_number\": \"\",\r\n    \"rc_number\": \"\",\r\n    \"spokenLanguages\": [\r\n        \"english\"\r\n    ],\r\n    \"boatIds\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users With ID (Test 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"userId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"userId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le user avec les nouvelles informations\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData.firstname).to.eql(\"JohnUpdated\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PATCH a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le user\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData.firstname).to.eql(\"JohnUpdatedTwo\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"JohnUpdatedTwo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users With ID (Test 3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"userId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"userId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le user avec les nouvelles informations\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData.firstname).to.eql(\"JohnUpdatedTwo\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le DELETE a réussi (204)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users With ID Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a échouer (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le user avec les infos supprimé\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData.firstname).to.eql(\"***\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/users/{{userId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reservations",
			"item": [
				{
					"name": "All Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"reservationId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"✅ Le POST a réussi (201), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"price\": \"150.00\",\r\n    \"nb_places\": 2,\r\n    \"user\": 1,\r\n    \"trip\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"reservationId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"reservationId\"))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PUT a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le reservation\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 1,\r\n        \"price\": \"150.00\",\r\n        \"nb_places\": 4,\r\n        \"user\": 1,\r\n        \"trip\": 1\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations With ID (Test 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"reservationId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"reservationId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le reservation avec les nouvelles informations\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"nb_places\");\r",
									"    pm.expect(jsonData.nb_places).to.eql(4)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PATCH a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le reservation avec les nouvelles informations\", function() {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"price\");\r",
									"    pm.expect(jsonData.price).to.eql(\"2000.00\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"price\": \"2000.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations With ID (Test 3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"reservationId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"reservationId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le reservation avec les nouvelles informations\", function() {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"price\");\r",
									"    pm.expect(jsonData.price).to.eql(\"2000.00\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le DELETE a réussi (204)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations With ID Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a échouer (404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/reservations/{{reservationId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Boats",
			"item": [
				{
					"name": "All Boats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/boats/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"boats",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Boats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"boatId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"✅ Le POST a réussi (201), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Sea Explorers\",\r\n    \"description\": \"A spacious fishing boat\",\r\n    \"boat_type\": \"cabine\",\r\n    \"picture\": \"sea_explorer.jpg\",\r\n    \"licence_type\": \"cotier\",\r\n    \"bail\": \"100.00\",\r\n    \"max_capacity\": 8,\r\n    \"city\": \"Paris\",\r\n    \"longitude\": 2.3522,\r\n    \"latitude\": 48.8566,\r\n    \"motor_type\": \"diesel\",\r\n    \"motor_power\": 150,\r\n    \"equipments\": [\r\n        \"sondeur\"\r\n    ],\r\n    \"owner\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/boats/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"boats",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Boats With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"boatId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"boatId\"))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/boats/{{boatId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"boats",
								"{{boatId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PUT a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le boat\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Sea Explorerssss\",\r\n    \"description\": \"A spacious fishing boat\",\r\n    \"boat_type\": \"cabine\",\r\n    \"picture\": \"sea_explorer.jpg\",\r\n    \"licence_type\": \"cotier\",\r\n    \"bail\": \"100.00\",\r\n    \"max_capacity\": 8,\r\n    \"city\": \"Paris\",\r\n    \"longitude\": 2.3522,\r\n    \"latitude\": 48.8566,\r\n    \"motor_type\": \"diesel\",\r\n    \"motor_power\": 150,\r\n    \"equipments\": [\r\n        \"sondeur\"\r\n    ],\r\n    \"owner\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/boats/{{boatId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"boats",
								"{{boatId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Boats With ID (Test 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"boatId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"boatId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le boat avec les nouvelles informations\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData.name).to.eql(\"Sea Explorerssss\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/boats/{{boatId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"boats",
								"{{boatId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Boats With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PATCH a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le boat avec les nouvelles informations\", function() {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"description\");\r",
									"    pm.expect(jsonData.description).to.eql(\"Dinguerie\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"Dinguerie\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/boats/{{boatId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"boats",
								"{{boatId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Boats With ID (Test 3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"boatId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"boatId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le boat avec les nouvelles informations\", function() {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"description\");\r",
									"    pm.expect(jsonData.description).to.eql(\"Dinguerie\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/boats/{{boatId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"boats",
								"{{boatId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Boats With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le DELETE a réussi (204)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/boats/{{boatId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"boats",
								"{{boatId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Boats With ID Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a échouer (404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/boats/{{boatId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"boats",
								"{{boatId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zone Géographique 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient des éléments\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    \r",
									"    // Vérifie que la réponse est bien un tableau et qu'il contient au moins un élément\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.be.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/boats?minLongitude=2&maxLongitude=2.5",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"boats"
							],
							"query": [
								{
									"key": "minLongitude",
									"value": "2"
								},
								{
									"key": "maxLongitude",
									"value": "2.5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Zone Géographique 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient des éléments\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    \r",
									"    // Vérifie que la réponse est bien un tableau et qu'il contient au moins un élément\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.be.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/boats?minLongitude=2&maxLongitude=3",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"boats"
							],
							"query": [
								{
									"key": "minLongitude",
									"value": "2"
								},
								{
									"key": "maxLongitude",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Zone Géographique 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient des éléments\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    \r",
									"    // Vérifie que la réponse est bien un tableau et qu'il contient au moins un élément\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.be.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/boats?minLongitude=2&maxLongitude=3&minLatitude=48&maxLatitude=49",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"boats"
							],
							"query": [
								{
									"key": "minLongitude",
									"value": "2"
								},
								{
									"key": "maxLongitude",
									"value": "3"
								},
								{
									"key": "minLatitude",
									"value": "48"
								},
								{
									"key": "maxLatitude",
									"value": "49"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Boats Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"boatId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"✅ Le POST a réussi (400), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"A spacious fishing boat\",\r\n    \"boat_type\": \"cabine\",\r\n    \"picture\": \"sea_explorer.jpg\",\r\n    \"licence_type\": \"cotier\",\r\n    \"bail\": \"100.00\",\r\n    \"max_capacity\": 8,\r\n    \"city\": \"Paris\",\r\n    \"longitude\": 2.3522,\r\n    \"latitude\": 48.8566,\r\n    \"motor_type\": \"diesel\",\r\n    \"motor_power\": 150,\r\n    \"equipments\": [\r\n        \"sondeur\"\r\n    ],\r\n    \"owner\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/boats/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"boats",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "FishingLogs",
			"item": [
				{
					"name": "All FishingLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-logs/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-logs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"fishingLogId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"✅ Le POST a réussi (201), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fish_name\": \"TunaTuna\",\r\n    \"picture\": \"tuna.jpg\",\r\n    \"comment\": \"Caught a big tuna!\",\r\n    \"height\": 80,\r\n    \"weight\": 200,\r\n    \"location\": \"Mediterranean Sea\",\r\n    \"date\": \"2024-11-30T23:00:00.000Z\",\r\n    \"freed\": false,\r\n    \"owner\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-logs/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-logs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingLogs With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"fishingLogId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"fish_name\");\r",
									"    pm.expect(jsonData.fish_name).to.eql(\"TunaTuna\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-logs/{{fishingLogId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-logs",
								"{{fishingLogId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PUT a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le fishingLog\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fish_name\": \"TunaTunaTuna\",\r\n    \"picture\": \"tuna.jpg\",\r\n    \"comment\": \"Caught a big tuna!\",\r\n    \"height\": 80,\r\n    \"weight\": 200,\r\n    \"location\": \"Mediterranean Sea\",\r\n    \"date\": \"2024-11-30T23:00:00.000Z\",\r\n    \"freed\": false,\r\n    \"owner\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-logs/{{fishingLogId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-logs",
								"{{fishingLogId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingLogs With ID (New name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"fishingLogId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"fishingLogId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le fishingLog avec les nouvelles informations\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"fish_name\");\r",
									"    pm.expect(jsonData.fish_name).to.eql(\"TunaTunaTuna\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-logs/{{fishingLogId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-logs",
								"{{fishingLogId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingLogs With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PATCH a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le fishingLog avec les nouvelles informations\", function() {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"fish_name\");\r",
									"    pm.expect(jsonData.fish_name).to.eql(\"TunaTunaTunaTuna\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fish_name\": \"TunaTunaTunaTuna\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-logs/{{fishingLogId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-logs",
								"{{fishingLogId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingLogs With ID (New name two)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"fishingLogId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"fishingLogId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le fishingLog avec les nouvelles informations\", function() {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"fish_name\");\r",
									"    pm.expect(jsonData.fish_name).to.eql(\"TunaTunaTunaTuna\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-logs/{{fishingLogId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-logs",
								"{{fishingLogId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingLogs With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le DELETE a réussi (204)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-logs/{{fishingLogId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-logs",
								"{{fishingLogId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingLogs With ID Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a échouer (404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-logs/{{fishingLogId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-logs",
								"{{fishingLogId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "FishingTrips",
			"item": [
				{
					"name": "All FishingTrips",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-trips/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-trips",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingTrips",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"fishingTripId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"✅ Le POST a réussi (201), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"information\": \"Test\",\r\n    \"type\": \"journaliere\",\r\n    \"price\": \"150.00\",\r\n    \"cost_type\": \"par personne\",\r\n    \"begin_date\": \"2024-11-30T23:00:00.000Z\",\r\n    \"end_date\": \"2024-11-30T23:00:00.000Z\",\r\n    \"begin_time\": \"08:00:00\",\r\n    \"end_time\": \"17:00:00\",\r\n    \"organiser\": 2,\r\n    \"boat\": 1,\r\n    \"passengers\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-trips/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-trips",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingTrips With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"fishingTripId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"information\");\r",
									"    pm.expect(jsonData.information).to.eql(\"Test\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-trips/{{fishingTripId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-trips",
								"{{fishingTripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PUT a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le fishingTrip\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"information\": \"TestTest\",\r\n    \"type\": \"journaliere\",\r\n    \"price\": \"150.00\",\r\n    \"cost_type\": \"par personne\",\r\n    \"begin_date\": \"2024-11-30T23:00:00.000Z\",\r\n    \"end_date\": \"2024-11-30T23:00:00.000Z\",\r\n    \"begin_time\": \"08:00:00\",\r\n    \"end_time\": \"17:00:00\",\r\n    \"organiser\": 2,\r\n    \"boat\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-trips/{{fishingTripId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-trips",
								"{{fishingTripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingTrips With ID (New name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"fishingTripId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"fishingTripId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le fishingTrip avec les nouvelles informations\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"information\");\r",
									"    pm.expect(jsonData.information).to.eql(\"TestTest\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-trips/{{fishingTripId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-trips",
								"{{fishingTripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingTrips With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le PATCH a réussi (200), id = \" + pm.response.json().id, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le fishingTrip avec les nouvelles informations\", function() {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"information\");\r",
									"    pm.expect(jsonData.information).to.eql(\"TestTestTest\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"information\": \"TestTestTest\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-trips/{{fishingTripId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-trips",
								"{{fishingTripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingTrips With ID (New name two)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a réussi (200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse contient le bon id (\" + pm.globals.get(\"fishingTripId\") + \")\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"fishingTripId\"))\r",
									"});\r",
									"\r",
									"pm.test(\"✅ La réponse renvoie le fishingTrip avec les nouvelles informations\", function() {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"information\");\r",
									"    pm.expect(jsonData.information).to.eql(\"TestTestTest\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-trips/{{fishingTripId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-trips",
								"{{fishingTripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingTrips With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le DELETE a réussi (204)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-trips/{{fishingTripId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-trips",
								"{{fishingTripId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FishingTrips With ID Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"✅ Le GET a échouer (404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/api/v1/fishing-trips/{{fishingTripId}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"fishing-trips",
								"{{fishingTripId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// 🔹 Étape 1 : Se connecter pour récupérer le token JWT\r",
					"pm.sendRequest({\r",
					"    url: 'https://localhost:3000/api/v1/auth/login',\r",
					"    method: 'POST',\r",
					"    header: { 'Content-Type': 'application/json' },\r",
					"    body: {\r",
					"        mode: 'raw',\r",
					"        raw: JSON.stringify({\r",
					"            email: \"alice.johnson@example.com\",\r",
					"            password: \"test\"\r",
					"        })\r",
					"    }\r",
					"}, \r",
					"\r",
					"function (err, res) {\r",
					"    if (err) {\r",
					"        console.log(\"❌ Erreur d'authentification :\", err);\r",
					"    } else {\r",
					"        let token = res.json().token;\r",
					"        pm.globals.set(\"token\", token);\r",
					"        console.log(\"✅ Token récupéré:\", token);\r",
					"    }\r",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}